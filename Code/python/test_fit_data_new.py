import unittest
from rate_kinetics_final import fit_data
import numpy as np
import pandas as pd

class TestRateKinetics(unittest.TestCase):
    def test_fit_data_baseline_steadystate(self):
    
        time = np.array([0.2519927506851981, 0.41026887798956047, 0.5998321467378084, 0.8188421368450075, 1.0893838893303711, 1.4629891665720638, 2.0040726715427906, 2.570922058, 3.1377714438624094, 3.7046208300222188, 4.271470216182029, 4.838319602341838, 5.405168988501647, 5.972018374661457, 6.538867760821266, 7.105717146981076, 7.672566533140885, 8.239415919300694, 8.806265305460503, 9.373114691620312, 9.939964077780122, 10.506813463939931, 11.07366285009974, 11.64051223625955, 12.20736162241936, 12.490786315499264, 13.057635701659073, 13.624485087818883, 14.191334473978692, 14.474759167058597, 15.041608553218406, 15.325033246298311, 15.89188263245812, 16.742156711697834, 17.309006097857644, 17.59243079093755, 18.159280177097358, 18.442704870177263, 19.009554256337072, 19.57640364249688, 20.426677721736596, 20.71010241, 21.27695180097631, 21.560376494056214, 22.127225880216024, 22.694075266375833, 22.977499959455738, 23.544349345615547, 24.111198731775357, 24.39462342485526, 24.96147281101507, 25.244897504094975, 25.811746890254785, 26.378596276414594, 26.945445662574404, 27.22887035565431, 28.362569127973927, 28.645993821053832, 29.21284320721364, 29.77969259337345, 30.063117286453355, 30.34654197953326, 30.91339136569307, 31.48024075185288, 32.04709013801269, 32.61393952, 33.18078891033231, 33.74763829649212, 34.31448768265193, 34.88133706881174, 35.44818645497155, 35.73161114805145, 36.29846053421126, 36.86530992037107, 37.43215930653088, 38.282433385770595, 38.849282771930405, 39.132707465010306, 39.699556851170115, 40.266406237329925])
        response = np.array([0.6477658834124753, 1.2563364055299537, 1.919260172752578, 2.4935463402652687, 3.0563424485562996, 3.6127792787875466, 4.132032726975005, 4.4465804888577924, 4.622774535927474, 4.724470428867022, 4.7883259895499934, 4.816706238742426, 4.833261384104677, 4.842721467168822, 4.846268998317876, 4.854546570999002, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.854546570999002, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.854546570999002, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.858094102148056, 4.8557290813820195, 4.856911591765037, 4.8557290813820195, 4.856911591765037, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.856911591765037, 4.8557290813820195, 4.8557290813820195, 4.8557290813820195, 4.856911591765037, 4.8557290813820195, 4.8557290813820195, 4.858094102148056])
        
        p0 = [0, 5, 1] 
        assumption = "baseline+steadystate"
    
        expected_params = np.array([0, 5, 1])  
    
        data = pd.DataFrame({'time': time, 'RU 1nM': response})
    
        params, _ = fit_data(time, response, p0, assumption, data)
    
        np.testing.assert_allclose(params, expected_params, atol=6e-1)

    def test_fit_data_response_to_zero(self):
        
        time = np.array([0.395939572892549, 1.731947822943837, 3.066704400027353, 4.400423004405889, 5.733179957601867, 7.065219488487051, 8.396633182888348, 9.727466833719214, 11.057918876937954, 12.38792825532663, 13.717617083321121, 15.047153268270762, 16.376460488653127, 17.70561506599064, 19.034723850414696, 20.363649463184938, 21.692544547346206, 23.021363309985052, 24.2895522552094, 25.61869156824243, 26.947540859490243, 28.276405415042543, 29.605254706290356, 30.934119261842657, 32.263044874612895, 33.5920010159921, 35.5855039174311, 36.914536380332734, 38.24362990045231, 39.57272342057188, 42.2310478395514, 44.22488655568907, 46.21884738626261, 47.54821566386292, 48.8775992057677, 50.20692169045456, 52.20112674989986, 53.530571349022594, 55.52485272999033, 56.85432785772202, 58.84873135312563, 60.843073791311305, 62.83743149380147, 64.16707452888251, 66.16160013872201, 68.15600363412561, 69.48576878364253, 70.81548814024599, 71.87313653370846 ])
        response = np.array([1.1242542878448951, 2.0680462341536163, 2.8207494407158826, 3.414988814317674, 3.8624161073825505, 4.20031692766592, 4.442673378076062, 4.596476510067113, 4.6920208799403404, 4.719985085756896, 4.69901193139448, 4.654735272184936, 4.575503355704697, 4.47296793437733, 4.363441461595823, 4.225950782997764, 4.083799403430273, 3.9299962714392223, 3.7482289336316192, 3.6433631618195363, 3.4942207307979096, 3.347408650261002, 3.1982662192393754, 3.0514541387024607, 2.913963460104398, 2.7811334824757665, 2.59237509321402, 2.471196868008949, 2.35934004474273, 2.247483221476511, 2.0447427293064884, 1.9072520507084256, 1.7884041759880702, 1.7184936614466828, 1.6509134973900075, 1.5740119313944838, 1.4924496644295324, 1.434190902311709, 1.3642803877703216, 1.3106823266219259, 1.2594146159582422, 1.1988255033557067, 1.1405667412378833, 1.1126025354213276, 1.0799776286353477, 1.0287099179716641, 1.0193885160328158, 1.0030760626398205, 0.9774422073079805 ])
        
    
        p0 = [1, 1, 0.1, 0.09] 
        assumption = "response to zero"
        
        expected_params = np.array([1, 1, 0.1, 0.09])  
        
        data = pd.DataFrame({'time': time, 'RU 1nM': response})
        
        params, _ = fit_data(time, response, p0, assumption, data)
        
        np.testing.assert_allclose(params, expected_params, atol=5e-1)
        
    def test_fit_data_response_to_steady_state(self):
            
        time = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        response = np.array([0, 0.5, 0.9, 1.4, 1.8, 2.1, 2.6, 3.0, 3.4, 3.7, 4.1])
            
        
        p0 = [0.1, 0.1, 0.1, 0.1, 0.1] 
        assumption = "response to steady state"
            
        expected_params = np.array([0.026])  
            
        data = pd.DataFrame({'time': time, 'RU 1nM': response})
            
        params, _ = fit_data(time, response, p0, assumption, data)
            
        np.testing.assert_allclose(params, expected_params, atol=1e-1)
    
    def test_fit_data_association(self):
            
        time = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        response = np.array([0, 0.5, 0.9, 1.4, 1.8, 2.1, 2.6, 3.0, 3.4, 3.7, 4.1])
                
            
        p0 = [0.1, 0.1, 0.1, 0.1] 
        assumption = "typical_association"
                
        expected_params = np.array([0.017, 0.026])  
                
        data = pd.DataFrame({'time': time, 'RU 1nM': response})
                
        params, _ = fit_data(time, response, p0, assumption, data)
                
        np.testing.assert_allclose(params, expected_params, atol=1e-1)

    def test_fit_data_dissociation(self):
                    
        time = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        response = np.array([0, 0.5, 0.9, 1.4, 1.8, 2.1, 2.6, 3.0, 3.4, 3.7, 4.1])
                        
                    
        p0 = [0.1] 
        assumption = "typical_dissociation"
                        
        expected_params = np.array([0.017])  
                        
        data = pd.DataFrame({'time': time, 'RU 1nM': response})
                        
        params, _ = fit_data(time, response, p0, assumption, data)
                        
        np.testing.assert_allclose(params, expected_params, atol=5)
if __name__ == '__main__':
    unittest.main()
